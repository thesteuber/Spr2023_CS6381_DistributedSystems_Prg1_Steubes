// Course: CS6381 Distributed Systems Principles
// Instructor: Aniruddha Gokhale
// Created: Spring 2023
//
// Purpose:
// Describe an initial schema for message exchange with the Discovery service.
//
// USE the following to refresh the _pb2:
// protoc -I=CS6381_MW --python_out=CS6381_MW CS6381_MW/discovery.proto

// Let us use the Version 3 syntax
syntax = "proto3";

// We will define all the enumeration types we need at the start

// An enumeration for the role we are playing
enum Role {
    ROLE_UNKNOWN = 0;
    ROLE_PUBLISHER = 1;
    ROLE_SUBSCRIBER = 2;
    ROLE_BOTH = 3;  // played by the broker.
}

// an enumeration for the status of the message request
enum Status {
    STATUS_UNKNOWN = 0;
    STATUS_SUCCESS = 1;
    STATUS_FAILURE = 2;
    STATUS_CHECK_AGAIN = 3;   // when the server is not ready to provide info as yet
}

// define an enum of all message types supported on a discovery service.
// This could be REGISTER_REQ, LOOKUP_PUB_BY_TOPIC, READY
enum MsgTypes {
     TYPE_UNKNOWN = 0;
     TYPE_REGISTER = 1;  // used by pub, sub and broker.
     TYPE_ISREADY = 2;    // needed by publisher to know if it can proceed
     TYPE_LOOKUP_PUB_BY_TOPIC = 3;  // needed by a subscriber
     TYPE_LOOKUP_ALL_PUBS = 4;   // probably needed by broker
     INC_REG_PUBS = 5;
     INC_REG_SUBS = 6;
     CHORD_TYPE_LOOKUP_PUB_BY_TOPIC = 7; 
     CHORD_TYPE_LOOKUP_ALL_PUBS = 8; 
     // anything more
}

// use to encode the details of the publisher or subscriber
// IP addr and port number are needed for publisher side only
message RegistrantInfo {
    string id = 1;  // name of the entity
    string addr = 2; // IP address (only for publisher)
    uint32 port = 3; // port number (only for publisher)
}

// Likewise, instead of just comma separated list of topics, maybe a better way to send the topic list
// Finally, maybe a nested structure that includes the name, IP and port and any additional info about
// the pub/sub entity here.
message RegisterReq
{
    Role role = 1;   // enum indicating what role we are playing
    RegistrantInfo info = 2; // info about the registrant
    repeated string topiclist = 3; // an array of topic names (published or subscribed to)
}

// Response to registration can be a success or a failure accompanied by a reason.
message RegisterResp
{
    Status status = 1;   // success or failure
    string reason = 2; // reason for failure
}

// define a message type that publishers might send to a discovery service
// to see if the system is all ready and if they can proceed to publish their
// topics. Accordingly, there will be a req and resp message types.
message IsReadyReq
{
   // we really don't need to send any field
}

// Response to the IsReady request
message IsReadyResp
{
    bool status = 1; // yes or no
}

// define more message types. For example, a subscriber middleware may want to know
// all the publishers that publish the topic that subscriber is interested in. In that case,
// a request will be a single topic or list of topics, and the response will be list of
// publishers with their name/IP/port for each topic requested. In the Direct approach, the
// discovery service will send whereabouts of each publisher; in the Broker approach, the
// whereabouts of the broker will be sent. Accordingly there will be request and response
// message types. Send_hash used for chord discovery
// pass around req until the next hash = sender_hash
// each node will return a LookupPubByTopicResp to the sender_hash 
message LookupPubByTopicReq
{
    repeated string topiclist = 1; // modify this appropriately
}

message ChordLookupPubByTopicReq
{
    repeated string topiclist = 1;
    repeated RegistrantInfo publishers = 2;
    string first_node_hash = 3;
    string sender_ip = 4;
    string sender_port = 5;
}

// lookupPubByTopic request
// accordingly there will be a response to the above message
message LookupPubByTopicResp
{
    repeated RegistrantInfo publishers = 1;
}

// For Chord discovery, everytime a publisher registers, increment
// a counter on each discovery service by passing around the IncrementRegisteredPubsReq
// to the next node until the next node hash = sender_hash
message IncrementRegisteredPubsReq
{
    string sender_hash = 1;
}

// For Chord discovery, everytime a subscriber registers, increment
// a counter on each discovery service by passing around the IncrementRegisteredSubsReq
// to the next node until the next node hash = sender_hash
message IncrementRegisteredSubsReq
{
    string sender_hash = 1;
}


// For broker use to have the discovery service send all the publishers to it.
// No body needed
message LookupAllPubsReq
{

}

message ChordLookupAllPubsReq
{
    repeated RegistrantInfo publishers = 1;
    string first_node_hash = 2;
    string sender_ip = 3;
    string sender_port = 4;
}

message LookupAllPubsResp
{
    repeated RegistrantInfo publishers = 1;
}

// Finally, we are going to make a union of all these request and response messages

// Discovery message (one of many)
message DiscoveryReq
{
        MsgTypes msg_type = 1;
        oneof Content {
              RegisterReq register_req = 2;
              IsReadyReq isready_req = 3;
              LookupPubByTopicReq lookup_req = 4;
              LookupAllPubsReq allpubs_req = 5;
              IncrementRegisteredPubsReq incregpubs_req = 6;
              IncrementRegisteredSubsReq incregsubs_req = 7;
              ChordLookupPubByTopicReq chord_lookup_req = 8;
              ChordLookupAllPubsReq chord_allpubs_req = 9;
        }
}

// Response to discovery req will be similar oneof of the responses.
message DiscoveryResp
{
        MsgTypes msg_type = 1;
        oneof Content {
              RegisterResp register_resp = 2;
              IsReadyResp isready_resp = 3;
              LookupPubByTopicResp lookup_resp = 4;
              LookupAllPubsResp allpubs_resp = 5;
        }
}

